//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TalentSteenAPI_V1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TalentSteenEntities : DbContext
    {
        public TalentSteenEntities()
            : base("name=TalentSteenEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<CVCertification> CVCertification { get; set; }
        public virtual DbSet<CVExperience> CVExperience { get; set; }
        public virtual DbSet<CVSearchTag> CVSearchTag { get; set; }
        public virtual DbSet<Employer> Employer { get; set; }
        public virtual DbSet<EmployerMembershipLevel> EmployerMembershipLevel { get; set; }
        public virtual DbSet<EmployerStatus> EmployerStatus { get; set; }
        public virtual DbSet<EmployerUser> EmployerUser { get; set; }
        public virtual DbSet<EmploymentType> EmploymentType { get; set; }
        public virtual DbSet<FunctionalArea> FunctionalArea { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<IndustryType> IndustryType { get; set; }
        public virtual DbSet<JobStatus> JobStatus { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<MaritalStatus> MaritalStatus { get; set; }
        public virtual DbSet<Recruiter> Recruiter { get; set; }
        public virtual DbSet<RecruiterFunctionalAreas> RecruiterFunctionalAreas { get; set; }
        public virtual DbSet<RecruiterIndustries> RecruiterIndustries { get; set; }
        public virtual DbSet<RecruiterMembershipLevel> RecruiterMembershipLevel { get; set; }
        public virtual DbSet<RecruiterPreferredLocations> RecruiterPreferredLocations { get; set; }
        public virtual DbSet<RecruiterStatus> RecruiterStatus { get; set; }
        public virtual DbSet<RecruiterUser> RecruiterUser { get; set; }
        public virtual DbSet<SearchTagMaster> SearchTagMaster { get; set; }
        public virtual DbSet<States> States { get; set; }
        public virtual DbSet<UserDetails> UserDetails { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UserStatus> UserStatus { get; set; }
        public virtual DbSet<UserType> UserType { get; set; }
        public virtual DbSet<RecruiterBankDetails> RecruiterBankDetails { get; set; }
        public virtual DbSet<CVStatus> CVStatus { get; set; }
        public virtual DbSet<JobFunction> JobFunction { get; set; }
        public virtual DbSet<CV> CV { get; set; }
        public virtual DbSet<RecruiterJob> RecruiterJob { get; set; }
        public virtual DbSet<EducationMajorMaster> EducationMajorMaster { get; set; }
        public virtual DbSet<EducationMaster> EducationMaster { get; set; }
        public virtual DbSet<CertificationMaster> CertificationMaster { get; set; }
        public virtual DbSet<JobSearchTag> JobSearchTag { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<District> District { get; set; }
        public virtual DbSet<Jobs> Jobs { get; set; }
        public virtual DbSet<JobCertifications> JobCertifications { get; set; }
        public virtual DbSet<JobCV> JobCV { get; set; }
    
        public virtual ObjectResult<USP_GetCountryList_Result> USP_GetCountryList(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetCountryList_Result>("USP_GetCountryList", countryIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_CreateEmployer(string employerName, string contactPersonName, string corporateEmailId, string contactNumber, string website, Nullable<int> countryId, Nullable<int> industryTypeId, string userTypeName, string userStatusName, string employerInitialStatus)
        {
            var employerNameParameter = employerName != null ?
                new ObjectParameter("EmployerName", employerName) :
                new ObjectParameter("EmployerName", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var corporateEmailIdParameter = corporateEmailId != null ?
                new ObjectParameter("CorporateEmailId", corporateEmailId) :
                new ObjectParameter("CorporateEmailId", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var industryTypeIdParameter = industryTypeId.HasValue ?
                new ObjectParameter("IndustryTypeId", industryTypeId) :
                new ObjectParameter("IndustryTypeId", typeof(int));
    
            var userTypeNameParameter = userTypeName != null ?
                new ObjectParameter("UserTypeName", userTypeName) :
                new ObjectParameter("UserTypeName", typeof(string));
    
            var userStatusNameParameter = userStatusName != null ?
                new ObjectParameter("UserStatusName", userStatusName) :
                new ObjectParameter("UserStatusName", typeof(string));
    
            var employerInitialStatusParameter = employerInitialStatus != null ?
                new ObjectParameter("EmployerInitialStatus", employerInitialStatus) :
                new ObjectParameter("EmployerInitialStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_CreateEmployer", employerNameParameter, contactPersonNameParameter, corporateEmailIdParameter, contactNumberParameter, websiteParameter, countryIdParameter, industryTypeIdParameter, userTypeNameParameter, userStatusNameParameter, employerInitialStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_CreateRecruiter(string fullName, Nullable<System.DateTime> dateOfBirth, Nullable<int> genderId, Nullable<int> locationId, string brandName, string primaryContactNumber, string secondaryContactNumber, string primaryEmailId, string secondaryEmailId, string onlineProfile, string recruitmentHistory, Nullable<int> countryId, Nullable<int> alertsAndNotification, string userTypeName, string userStatusName, string recruiterInitialStatus, Nullable<int> yearsOfExperience)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var primaryContactNumberParameter = primaryContactNumber != null ?
                new ObjectParameter("PrimaryContactNumber", primaryContactNumber) :
                new ObjectParameter("PrimaryContactNumber", typeof(string));
    
            var secondaryContactNumberParameter = secondaryContactNumber != null ?
                new ObjectParameter("SecondaryContactNumber", secondaryContactNumber) :
                new ObjectParameter("SecondaryContactNumber", typeof(string));
    
            var primaryEmailIdParameter = primaryEmailId != null ?
                new ObjectParameter("PrimaryEmailId", primaryEmailId) :
                new ObjectParameter("PrimaryEmailId", typeof(string));
    
            var secondaryEmailIdParameter = secondaryEmailId != null ?
                new ObjectParameter("SecondaryEmailId", secondaryEmailId) :
                new ObjectParameter("SecondaryEmailId", typeof(string));
    
            var onlineProfileParameter = onlineProfile != null ?
                new ObjectParameter("OnlineProfile", onlineProfile) :
                new ObjectParameter("OnlineProfile", typeof(string));
    
            var recruitmentHistoryParameter = recruitmentHistory != null ?
                new ObjectParameter("RecruitmentHistory", recruitmentHistory) :
                new ObjectParameter("RecruitmentHistory", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var alertsAndNotificationParameter = alertsAndNotification.HasValue ?
                new ObjectParameter("AlertsAndNotification", alertsAndNotification) :
                new ObjectParameter("AlertsAndNotification", typeof(int));
    
            var userTypeNameParameter = userTypeName != null ?
                new ObjectParameter("UserTypeName", userTypeName) :
                new ObjectParameter("UserTypeName", typeof(string));
    
            var userStatusNameParameter = userStatusName != null ?
                new ObjectParameter("UserStatusName", userStatusName) :
                new ObjectParameter("UserStatusName", typeof(string));
    
            var recruiterInitialStatusParameter = recruiterInitialStatus != null ?
                new ObjectParameter("RecruiterInitialStatus", recruiterInitialStatus) :
                new ObjectParameter("RecruiterInitialStatus", typeof(string));
    
            var yearsOfExperienceParameter = yearsOfExperience.HasValue ?
                new ObjectParameter("YearsOfExperience", yearsOfExperience) :
                new ObjectParameter("YearsOfExperience", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_CreateRecruiter", fullNameParameter, dateOfBirthParameter, genderIdParameter, locationIdParameter, brandNameParameter, primaryContactNumberParameter, secondaryContactNumberParameter, primaryEmailIdParameter, secondaryEmailIdParameter, onlineProfileParameter, recruitmentHistoryParameter, countryIdParameter, alertsAndNotificationParameter, userTypeNameParameter, userStatusNameParameter, recruiterInitialStatusParameter, yearsOfExperienceParameter);
        }
    
        public virtual ObjectResult<USP_GetEmployerList_Result> USP_GetEmployerList(Nullable<int> limit1, Nullable<int> limit2)
        {
            var limit1Parameter = limit1.HasValue ?
                new ObjectParameter("Limit1", limit1) :
                new ObjectParameter("Limit1", typeof(int));
    
            var limit2Parameter = limit2.HasValue ?
                new ObjectParameter("Limit2", limit2) :
                new ObjectParameter("Limit2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetEmployerList_Result>("USP_GetEmployerList", limit1Parameter, limit2Parameter);
        }
    
        public virtual ObjectResult<USP_GetRecruiterList_Result> USP_GetRecruiterList(Nullable<int> limit1, Nullable<int> limit2)
        {
            var limit1Parameter = limit1.HasValue ?
                new ObjectParameter("Limit1", limit1) :
                new ObjectParameter("Limit1", typeof(int));
    
            var limit2Parameter = limit2.HasValue ?
                new ObjectParameter("Limit2", limit2) :
                new ObjectParameter("Limit2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRecruiterList_Result>("USP_GetRecruiterList", limit1Parameter, limit2Parameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_EmployerActivation(Nullable<int> employerId, string userStatusName, string employerStatusName, string employerAdminUserTypeName)
        {
            var employerIdParameter = employerId.HasValue ?
                new ObjectParameter("EmployerId", employerId) :
                new ObjectParameter("EmployerId", typeof(int));
    
            var userStatusNameParameter = userStatusName != null ?
                new ObjectParameter("UserStatusName", userStatusName) :
                new ObjectParameter("UserStatusName", typeof(string));
    
            var employerStatusNameParameter = employerStatusName != null ?
                new ObjectParameter("EmployerStatusName", employerStatusName) :
                new ObjectParameter("EmployerStatusName", typeof(string));
    
            var employerAdminUserTypeNameParameter = employerAdminUserTypeName != null ?
                new ObjectParameter("EmployerAdminUserTypeName", employerAdminUserTypeName) :
                new ObjectParameter("EmployerAdminUserTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_EmployerActivation", employerIdParameter, userStatusNameParameter, employerStatusNameParameter, employerAdminUserTypeNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_RecruiterActivation(Nullable<int> recruiterId, string userStatusName, string recruiterStatusName, string recruiterAdminUserTypeName)
        {
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            var userStatusNameParameter = userStatusName != null ?
                new ObjectParameter("UserStatusName", userStatusName) :
                new ObjectParameter("UserStatusName", typeof(string));
    
            var recruiterStatusNameParameter = recruiterStatusName != null ?
                new ObjectParameter("RecruiterStatusName", recruiterStatusName) :
                new ObjectParameter("RecruiterStatusName", typeof(string));
    
            var recruiterAdminUserTypeNameParameter = recruiterAdminUserTypeName != null ?
                new ObjectParameter("RecruiterAdminUserTypeName", recruiterAdminUserTypeName) :
                new ObjectParameter("RecruiterAdminUserTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_RecruiterActivation", recruiterIdParameter, userStatusNameParameter, recruiterStatusNameParameter, recruiterAdminUserTypeNameParameter);
        }
    
        public virtual ObjectResult<USP_Login_Result> USP_Login(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Login_Result>("USP_Login", emailIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<USP_GetLocationList_Result> USP_GetLocationList(Nullable<int> locationId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLocationList_Result>("USP_GetLocationList", locationIdParameter);
        }
    
        public virtual ObjectResult<USP_GetEmploymentTypeList_Result> USP_GetEmploymentTypeList(Nullable<int> employmentTypeId)
        {
            var employmentTypeIdParameter = employmentTypeId.HasValue ?
                new ObjectParameter("EmploymentTypeId", employmentTypeId) :
                new ObjectParameter("EmploymentTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetEmploymentTypeList_Result>("USP_GetEmploymentTypeList", employmentTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_CreateJob(string jobTitle, string jobDescription, Nullable<int> minimumYearsOfExperience, Nullable<int> maximumYearsOfExperience, Nullable<int> educationId, Nullable<int> majorId, Nullable<int> countryId, string cityName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> employmentTypeId, Nullable<decimal> rewardOffered, Nullable<int> createdBy, Nullable<int> jobStatusId, Nullable<int> employerId, Nullable<int> jobFunctionId, Nullable<int> genderId, Nullable<int> ageFrom, Nullable<int> ageTo, Nullable<int> salaryRangeFrom, Nullable<int> salaryRangeTo)
        {
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var jobDescriptionParameter = jobDescription != null ?
                new ObjectParameter("JobDescription", jobDescription) :
                new ObjectParameter("JobDescription", typeof(string));
    
            var minimumYearsOfExperienceParameter = minimumYearsOfExperience.HasValue ?
                new ObjectParameter("MinimumYearsOfExperience", minimumYearsOfExperience) :
                new ObjectParameter("MinimumYearsOfExperience", typeof(int));
    
            var maximumYearsOfExperienceParameter = maximumYearsOfExperience.HasValue ?
                new ObjectParameter("MaximumYearsOfExperience", maximumYearsOfExperience) :
                new ObjectParameter("MaximumYearsOfExperience", typeof(int));
    
            var educationIdParameter = educationId.HasValue ?
                new ObjectParameter("EducationId", educationId) :
                new ObjectParameter("EducationId", typeof(int));
    
            var majorIdParameter = majorId.HasValue ?
                new ObjectParameter("MajorId", majorId) :
                new ObjectParameter("MajorId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var employmentTypeIdParameter = employmentTypeId.HasValue ?
                new ObjectParameter("EmploymentTypeId", employmentTypeId) :
                new ObjectParameter("EmploymentTypeId", typeof(int));
    
            var rewardOfferedParameter = rewardOffered.HasValue ?
                new ObjectParameter("RewardOffered", rewardOffered) :
                new ObjectParameter("RewardOffered", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var jobStatusIdParameter = jobStatusId.HasValue ?
                new ObjectParameter("JobStatusId", jobStatusId) :
                new ObjectParameter("JobStatusId", typeof(int));
    
            var employerIdParameter = employerId.HasValue ?
                new ObjectParameter("EmployerId", employerId) :
                new ObjectParameter("EmployerId", typeof(int));
    
            var jobFunctionIdParameter = jobFunctionId.HasValue ?
                new ObjectParameter("JobFunctionId", jobFunctionId) :
                new ObjectParameter("JobFunctionId", typeof(int));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(int));
    
            var ageFromParameter = ageFrom.HasValue ?
                new ObjectParameter("AgeFrom", ageFrom) :
                new ObjectParameter("AgeFrom", typeof(int));
    
            var ageToParameter = ageTo.HasValue ?
                new ObjectParameter("AgeTo", ageTo) :
                new ObjectParameter("AgeTo", typeof(int));
    
            var salaryRangeFromParameter = salaryRangeFrom.HasValue ?
                new ObjectParameter("SalaryRangeFrom", salaryRangeFrom) :
                new ObjectParameter("SalaryRangeFrom", typeof(int));
    
            var salaryRangeToParameter = salaryRangeTo.HasValue ?
                new ObjectParameter("SalaryRangeTo", salaryRangeTo) :
                new ObjectParameter("SalaryRangeTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_CreateJob", jobTitleParameter, jobDescriptionParameter, minimumYearsOfExperienceParameter, maximumYearsOfExperienceParameter, educationIdParameter, majorIdParameter, countryIdParameter, cityNameParameter, startDateParameter, endDateParameter, employmentTypeIdParameter, rewardOfferedParameter, createdByParameter, jobStatusIdParameter, employerIdParameter, jobFunctionIdParameter, genderIdParameter, ageFromParameter, ageToParameter, salaryRangeFromParameter, salaryRangeToParameter);
        }
    
        public virtual ObjectResult<USP_GetJobsByEmployer_Result> USP_GetJobsByEmployer(Nullable<int> userId, Nullable<int> employerId, Nullable<int> limit1, Nullable<int> limit2, Nullable<int> jobStatusId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var employerIdParameter = employerId.HasValue ?
                new ObjectParameter("EmployerId", employerId) :
                new ObjectParameter("EmployerId", typeof(int));
    
            var limit1Parameter = limit1.HasValue ?
                new ObjectParameter("Limit1", limit1) :
                new ObjectParameter("Limit1", typeof(int));
    
            var limit2Parameter = limit2.HasValue ?
                new ObjectParameter("Limit2", limit2) :
                new ObjectParameter("Limit2", typeof(int));
    
            var jobStatusIdParameter = jobStatusId.HasValue ?
                new ObjectParameter("JobStatusId", jobStatusId) :
                new ObjectParameter("JobStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetJobsByEmployer_Result>("USP_GetJobsByEmployer", userIdParameter, employerIdParameter, limit1Parameter, limit2Parameter, jobStatusIdParameter);
        }
    
        public virtual ObjectResult<USP_GetIndustryTypeList_Result> USP_GetIndustryTypeList(Nullable<int> industryTypeId)
        {
            var industryTypeIdParameter = industryTypeId.HasValue ?
                new ObjectParameter("IndustryTypeId", industryTypeId) :
                new ObjectParameter("IndustryTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetIndustryTypeList_Result>("USP_GetIndustryTypeList", industryTypeIdParameter);
        }
    
        public virtual ObjectResult<USP_GetFunctionalAreaList_Result> USP_GetFunctionalAreaList(Nullable<int> functionalAreaId)
        {
            var functionalAreaIdParameter = functionalAreaId.HasValue ?
                new ObjectParameter("FunctionalAreaId", functionalAreaId) :
                new ObjectParameter("FunctionalAreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetFunctionalAreaList_Result>("USP_GetFunctionalAreaList", functionalAreaIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_CreateCV(Nullable<int> recruiterId, Nullable<int> createdBy, string fullName, Nullable<int> countryId, Nullable<int> genderId, Nullable<System.DateTime> dOB, Nullable<int> maritalStatusId, string primaryContactNumber, string secondaryContactNumber, string emailId, Nullable<bool> isWillingToRelocate, Nullable<bool> isWillingToTravel, string noticePeriod, string skillSet, string others)
        {
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var maritalStatusIdParameter = maritalStatusId.HasValue ?
                new ObjectParameter("MaritalStatusId", maritalStatusId) :
                new ObjectParameter("MaritalStatusId", typeof(int));
    
            var primaryContactNumberParameter = primaryContactNumber != null ?
                new ObjectParameter("PrimaryContactNumber", primaryContactNumber) :
                new ObjectParameter("PrimaryContactNumber", typeof(string));
    
            var secondaryContactNumberParameter = secondaryContactNumber != null ?
                new ObjectParameter("SecondaryContactNumber", secondaryContactNumber) :
                new ObjectParameter("SecondaryContactNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var isWillingToRelocateParameter = isWillingToRelocate.HasValue ?
                new ObjectParameter("IsWillingToRelocate", isWillingToRelocate) :
                new ObjectParameter("IsWillingToRelocate", typeof(bool));
    
            var isWillingToTravelParameter = isWillingToTravel.HasValue ?
                new ObjectParameter("IsWillingToTravel", isWillingToTravel) :
                new ObjectParameter("IsWillingToTravel", typeof(bool));
    
            var noticePeriodParameter = noticePeriod != null ?
                new ObjectParameter("NoticePeriod", noticePeriod) :
                new ObjectParameter("NoticePeriod", typeof(string));
    
            var skillSetParameter = skillSet != null ?
                new ObjectParameter("SkillSet", skillSet) :
                new ObjectParameter("SkillSet", typeof(string));
    
            var othersParameter = others != null ?
                new ObjectParameter("Others", others) :
                new ObjectParameter("Others", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_CreateCV", recruiterIdParameter, createdByParameter, fullNameParameter, countryIdParameter, genderIdParameter, dOBParameter, maritalStatusIdParameter, primaryContactNumberParameter, secondaryContactNumberParameter, emailIdParameter, isWillingToRelocateParameter, isWillingToTravelParameter, noticePeriodParameter, skillSetParameter, othersParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_CreateCVExperience(Nullable<int> cVId, Nullable<int> yearOfJoining, string companyName, Nullable<int> industryTypeId, Nullable<int> companyLocationId, string designation, Nullable<int> functionalAreaId, string reportingToPerson, Nullable<decimal> salary, string resposibilities, string moreDetails)
        {
            var cVIdParameter = cVId.HasValue ?
                new ObjectParameter("CVId", cVId) :
                new ObjectParameter("CVId", typeof(int));
    
            var yearOfJoiningParameter = yearOfJoining.HasValue ?
                new ObjectParameter("YearOfJoining", yearOfJoining) :
                new ObjectParameter("YearOfJoining", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var industryTypeIdParameter = industryTypeId.HasValue ?
                new ObjectParameter("IndustryTypeId", industryTypeId) :
                new ObjectParameter("IndustryTypeId", typeof(int));
    
            var companyLocationIdParameter = companyLocationId.HasValue ?
                new ObjectParameter("CompanyLocationId", companyLocationId) :
                new ObjectParameter("CompanyLocationId", typeof(int));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var functionalAreaIdParameter = functionalAreaId.HasValue ?
                new ObjectParameter("FunctionalAreaId", functionalAreaId) :
                new ObjectParameter("FunctionalAreaId", typeof(int));
    
            var reportingToPersonParameter = reportingToPerson != null ?
                new ObjectParameter("ReportingToPerson", reportingToPerson) :
                new ObjectParameter("ReportingToPerson", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var resposibilitiesParameter = resposibilities != null ?
                new ObjectParameter("Resposibilities", resposibilities) :
                new ObjectParameter("Resposibilities", typeof(string));
    
            var moreDetailsParameter = moreDetails != null ?
                new ObjectParameter("MoreDetails", moreDetails) :
                new ObjectParameter("MoreDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_CreateCVExperience", cVIdParameter, yearOfJoiningParameter, companyNameParameter, industryTypeIdParameter, companyLocationIdParameter, designationParameter, functionalAreaIdParameter, reportingToPersonParameter, salaryParameter, resposibilitiesParameter, moreDetailsParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_CreateCVCertification(Nullable<int> cVId, Nullable<int> yearOfPassing, string certification, string major, string university, Nullable<int> locationId)
        {
            var cVIdParameter = cVId.HasValue ?
                new ObjectParameter("CVId", cVId) :
                new ObjectParameter("CVId", typeof(int));
    
            var yearOfPassingParameter = yearOfPassing.HasValue ?
                new ObjectParameter("YearOfPassing", yearOfPassing) :
                new ObjectParameter("YearOfPassing", typeof(int));
    
            var certificationParameter = certification != null ?
                new ObjectParameter("Certification", certification) :
                new ObjectParameter("Certification", typeof(string));
    
            var majorParameter = major != null ?
                new ObjectParameter("Major", major) :
                new ObjectParameter("Major", typeof(string));
    
            var universityParameter = university != null ?
                new ObjectParameter("University", university) :
                new ObjectParameter("University", typeof(string));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_CreateCVCertification", cVIdParameter, yearOfPassingParameter, certificationParameter, majorParameter, universityParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<USP_GetGenderList_Result> USP_GetGenderList(Nullable<int> genderId)
        {
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetGenderList_Result>("USP_GetGenderList", genderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_CreateRecruiterIndustryType(Nullable<int> recruiterId, Nullable<int> industryTypeId)
        {
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            var industryTypeIdParameter = industryTypeId.HasValue ?
                new ObjectParameter("IndustryTypeId", industryTypeId) :
                new ObjectParameter("IndustryTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_CreateRecruiterIndustryType", recruiterIdParameter, industryTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_CreateRecruiterFunctionalArea(Nullable<int> recruiterId, Nullable<int> functionalAreaId)
        {
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            var functionalAreaIdParameter = functionalAreaId.HasValue ?
                new ObjectParameter("FunctionalAreaId", functionalAreaId) :
                new ObjectParameter("FunctionalAreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_CreateRecruiterFunctionalArea", recruiterIdParameter, functionalAreaIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> USP_CreateRecruiterPrefferedLocation(Nullable<int> recruiterId, Nullable<int> locationId)
        {
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("USP_CreateRecruiterPrefferedLocation", recruiterIdParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<USP_GetRecruiterFunctionalArea_Result> USP_GetRecruiterFunctionalArea(Nullable<int> recruiterId)
        {
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRecruiterFunctionalArea_Result>("USP_GetRecruiterFunctionalArea", recruiterIdParameter);
        }
    
        public virtual ObjectResult<USP_GetRecruiterIndustryTypeList_Result> USP_GetRecruiterIndustryTypeList(Nullable<int> recruiterId)
        {
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRecruiterIndustryTypeList_Result>("USP_GetRecruiterIndustryTypeList", recruiterIdParameter);
        }
    
        public virtual ObjectResult<USP_GetRecruiterPrefferedLocations_Result> USP_GetRecruiterPrefferedLocations(Nullable<int> recruiterId)
        {
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRecruiterPrefferedLocations_Result>("USP_GetRecruiterPrefferedLocations", recruiterIdParameter);
        }
    
        public virtual ObjectResult<USP_GetRecruiterJobs_Result> USP_GetRecruiterJobs(Nullable<int> userId, Nullable<int> recruiterId, Nullable<int> limit1, Nullable<int> limit2, Nullable<int> jobStatusId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            var limit1Parameter = limit1.HasValue ?
                new ObjectParameter("Limit1", limit1) :
                new ObjectParameter("Limit1", typeof(int));
    
            var limit2Parameter = limit2.HasValue ?
                new ObjectParameter("Limit2", limit2) :
                new ObjectParameter("Limit2", typeof(int));
    
            var jobStatusIdParameter = jobStatusId.HasValue ?
                new ObjectParameter("JobStatusId", jobStatusId) :
                new ObjectParameter("JobStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRecruiterJobs_Result>("USP_GetRecruiterJobs", userIdParameter, recruiterIdParameter, limit1Parameter, limit2Parameter, jobStatusIdParameter);
        }
    
        public virtual ObjectResult<USP_SubmittedCV_Result> USP_SubmittedCV(Nullable<int> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SubmittedCV_Result>("USP_SubmittedCV", jobIdParameter);
        }
    
        public virtual ObjectResult<USP_GetJobCVs_Result> USP_GetJobCVs(Nullable<int> jobId, Nullable<int> limit1, Nullable<int> limit2)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var limit1Parameter = limit1.HasValue ?
                new ObjectParameter("Limit1", limit1) :
                new ObjectParameter("Limit1", typeof(int));
    
            var limit2Parameter = limit2.HasValue ?
                new ObjectParameter("Limit2", limit2) :
                new ObjectParameter("Limit2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetJobCVs_Result>("USP_GetJobCVs", jobIdParameter, limit1Parameter, limit2Parameter);
        }
    
        public virtual ObjectResult<USP_CVDetailsByEmailId_Result> USP_CVDetailsByEmailId(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CVDetailsByEmailId_Result>("USP_CVDetailsByEmailId", emailIdParameter);
        }
    
        public virtual ObjectResult<USP_GetRecruiterCVs_Result> Usp_GetRecruiterCVs(Nullable<int> userId, Nullable<int> recruiterId, Nullable<int> limit1, Nullable<int> limit2)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            var limit1Parameter = limit1.HasValue ?
                new ObjectParameter("Limit1", limit1) :
                new ObjectParameter("Limit1", typeof(int));
    
            var limit2Parameter = limit2.HasValue ?
                new ObjectParameter("Limit2", limit2) :
                new ObjectParameter("Limit2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetRecruiterCVs_Result>("Usp_GetRecruiterCVs", userIdParameter, recruiterIdParameter, limit1Parameter, limit2Parameter);
        }
    
        public virtual ObjectResult<USP_GetCityDetails_Result> USP_GetCityDetails(string word)
        {
            var wordParameter = word != null ?
                new ObjectParameter("word", word) :
                new ObjectParameter("word", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetCityDetails_Result>("USP_GetCityDetails", wordParameter);
        }
    
        public virtual ObjectResult<USP_GetNewJobsOfRecruiter_Result> USP_GetNewJobsOfRecruiter(Nullable<int> userId, Nullable<int> recruiterId, Nullable<int> limit1, Nullable<int> limit2, Nullable<int> jobStatusId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var recruiterIdParameter = recruiterId.HasValue ?
                new ObjectParameter("RecruiterId", recruiterId) :
                new ObjectParameter("RecruiterId", typeof(int));
    
            var limit1Parameter = limit1.HasValue ?
                new ObjectParameter("Limit1", limit1) :
                new ObjectParameter("Limit1", typeof(int));
    
            var limit2Parameter = limit2.HasValue ?
                new ObjectParameter("Limit2", limit2) :
                new ObjectParameter("Limit2", typeof(int));
    
            var jobStatusIdParameter = jobStatusId.HasValue ?
                new ObjectParameter("JobStatusId", jobStatusId) :
                new ObjectParameter("JobStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetNewJobsOfRecruiter_Result>("USP_GetNewJobsOfRecruiter", userIdParameter, recruiterIdParameter, limit1Parameter, limit2Parameter, jobStatusIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllJobsForAdmin_Result> USP_GetAllJobsForAdmin(Nullable<int> limit1, Nullable<int> limit2, Nullable<int> jobStatusId)
        {
            var limit1Parameter = limit1.HasValue ?
                new ObjectParameter("Limit1", limit1) :
                new ObjectParameter("Limit1", typeof(int));
    
            var limit2Parameter = limit2.HasValue ?
                new ObjectParameter("Limit2", limit2) :
                new ObjectParameter("Limit2", typeof(int));
    
            var jobStatusIdParameter = jobStatusId.HasValue ?
                new ObjectParameter("JobStatusId", jobStatusId) :
                new ObjectParameter("JobStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllJobsForAdmin_Result>("USP_GetAllJobsForAdmin", limit1Parameter, limit2Parameter, jobStatusIdParameter);
        }
    
        public virtual ObjectResult<USP_GetAllCVForAdmin_Result> USP_GetAllCVForAdmin(Nullable<int> limit1, Nullable<int> limit2)
        {
            var limit1Parameter = limit1.HasValue ?
                new ObjectParameter("Limit1", limit1) :
                new ObjectParameter("Limit1", typeof(int));
    
            var limit2Parameter = limit2.HasValue ?
                new ObjectParameter("Limit2", limit2) :
                new ObjectParameter("Limit2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetAllCVForAdmin_Result>("USP_GetAllCVForAdmin", limit1Parameter, limit2Parameter);
        }
    }
}
